@article{VanderLinden2014,
author = {van der Linden, Roland and Lopes, Ricardo and Bidarra, Rafael},
doi = {10.1109/TCIAIG.2013.2290371},
issn = {1943-068X},
journal = {IEEE Transactions on Computational Intelligence and AI in Games},
month = {mar},
number = {1},
pages = {78--89},
title = {{Procedural Generation of Dungeons}},
url = {http://ieeexplore.ieee.org/document/6661386/},
volume = {6},
year = {2014}
}
@misc{SpeedTree,
author = {SpeedTree},
title = {{SpeedTree Vegetation Modeling}},
url = {https://speedtree.com/},
urldate = {2018-05-11}
}
@misc{Olah2015,
abstract = {Humans don't start their thinking from scratch every second. As you read this essay, you understand each word based on your understanding of previous words. You don't throw everything away and start thinking from scratch again. Your thoughts have persistence.},
author = {Olah, Christopher},
title = {{Understanding LSTM Networks}},
url = {https://colah.github.io/posts/2015-08-Understanding-LSTMs/},
urldate = {2018-04-23},
year = {2015}
}
@misc{MichaelCopeland2016,
abstract = {Artificial intelligence is the future. Artificial intelligence is science fiction. Artificial intelligence is already part of our everyday lives. All those statements are true, it just depends on what flavor of AI you are referring to.},
author = {{Michael Copeland}},
title = {{The Difference Between AI, Machine Learning, and Deep Learning? | NVIDIA Blog}},
url = {https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/},
urldate = {2018-04-16},
year = {2016}
}
@inproceedings{Mawhorter2010,
author = {Mawhorter, Peter and Mateas, Michael},
booktitle = {Proceedings of the 2010 IEEE Conference on Computational Intelligence and Games},
doi = {10.1109/ITW.2010.5593333},
isbn = {978-1-4244-6295-7},
month = {aug},
pages = {351--358},
publisher = {IEEE},
title = {{Procedural level generation using occupancy-regulated extension}},
url = {http://ieeexplore.ieee.org/document/5593333/},
year = {2010}
}
@article{Hochreiter1997,
abstract = {Learning to store information over extended time intervals via recurrent backpropagation takes a very long time, mostly due to insuucient, decaying error back We brieey review Hochreiter's 1991 analysis of this problem, then address it by introducing a novel, eecient, gradient-based method called $\backslash$Long Short-Term Memory" (LSTM). Truncating the gradient where this does not do harm, LSTM can learn to bridge minimal time lags in excess of 1000 discrete time steps by enforcing constant error through $\backslash$constant error carrousels" within special units. Multiplicative gate units learn to open and close access to the constant error LSTM is local in space and time; its computational complexity per time step and weight is O(1). Our experiments with artiicial data involve local, distributed, real-valued, and noisy pattern representations. In comparisons with RTRL, BPTT, Recurrent Cascade-Correlation, Elman nets, and Neural Sequence Chunking, LSTM leads to many more successful runs, and learns much faster. LSTM also solves complex, artiicial long time lag tasks that have never been solved by previous recurrent network algorithms.},
author = {Hochreiter, Sepp and {Urgen Schmidhuber}, Jj},
file = {::},
journal = {Neural Computation},
number = {8},
pages = {1735--1780},
title = {{LONG SHORT-TERM MEMORY}},
url = {http://www7.informatik.tu-muenchen.de/{~}hochreit http://www.idsia.ch/{~}juergen},
volume = {9},
year = {1997}
}
@article{Hendrikx2013,
author = {Hendrikx, Mark and Meijer, Sebastiaan and {Van Der Velden}, Joeri and Iosup, Alexandru},
doi = {10.1145/2422956.2422957},
file = {::},
issn = {15516857},
journal = {ACM Transactions on Multimedia Computing, Communications, and Applications},
keywords = {Game content generation,procedural,survey},
month = {feb},
number = {1},
pages = {1--22},
publisher = {ACM},
title = {{Procedural content generation for games}},
url = {http://dl.acm.org/citation.cfm?doid=2422956.2422957},
volume = {9},
year = {2013}
}
@article{Greff,
abstract = {—Several variants of the Long Short-Term Memory (LSTM) architecture for recurrent neural networks have been proposed since its inception in 1995. In recent years, these networks have become the state-of-the-art models for a variety of machine learning problems. This has led to a renewed interest in understanding the role and utility of various computational components of typical LSTM variants. In this paper, we present the first large-scale analysis of eight LSTM variants on three representative tasks: speech recognition, handwriting recognition, and polyphonic music modeling. The hyperparameters of all LSTM variants for each task were optimized separately using random search, and their importance was assessed using the powerful fANOVA framework. In total, we summarize the results of 5400 experimental runs (≈ 15 years of CPU time), which makes our study the largest of its kind on LSTM networks. Our results show that none of the variants can improve upon the standard LSTM architecture significantly, and demonstrate the forget gate and the output activation function to be its most critical components. We further observe that the studied hyperparameters are virtually independent and derive guidelines for their efficient adjustment.},
author = {Greff, Klaus and Srivastava, Rupesh K and Koutn{\'{i}}k, Jan and Steunebrink, Bas R and Schmidhuber, J{\"{u}}rgen},
doi = {10.1109/TNNLS.2016.2582924},
file = {::},
keywords = {Index Terms—Recurrent neural networks,LSTM,Long Short-Term Memory,fANOVA,random search,sequence learning},
title = {{TRANSACTIONS ON NEURAL NETWORKS AND LEARNING SYSTEMS LSTM: A Search Space Odyssey}},
url = {https://arxiv.org/pdf/1503.04069.pdf}
}
@misc{AdamGeitgey2016,
abstract = {This time, we are going to see one of these generic algorithms do something really cool — create video game levels that look like they were made by humans.},
author = {{Adam Geitgey}},
title = {{Machine Learning is Fun! Part 2 – Adam Geitgey – Medium}},
url = {https://medium.com/@ageitgey/machine-learning-is-fun-part-2-a26a10b68df3},
urldate = {2018-04-29},
year = {2016}
}
